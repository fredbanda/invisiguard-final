// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                                      String          @id @default(cuid())
  name                                    String?
  email                                   String          @unique
  emailVerified                           DateTime?
  image                                   String?
  accounts                                Account[]
  password                                String?
  phone                                   String?
  address                                 String?
  street                                  String?
  city                                    String?
  province                                String?
  role                                    UserRole @default(USER)
  country                                 String?
  postcode                                String?
  isTwoFactorEnabled                      Boolean         @default(false)
  twoFactorConfirmation                   TwoFactorConfirmation? 

  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt

  @@map("user")
}
 
model Account {
  userId                                  String
  type                                    String
  provider                                String
  providerAccountId                       String
  refresh_token                           String?
  access_token                            String?
  expires_at                              Int?
  token_type                              String?
  scope                                   String?
  id_token                                String?
  session_state                           String?
 
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])

  @@map("account")
}

model VerificationToken {
  id                                       String          @id @default(cuid())
  email                                    String          @unique
  token                                    String          @unique
  expires                                  DateTime

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  @@unique([email, token])

  @@map("verification_token")
}

model PasswordResetToken {
  id                                       String          @id @default(cuid())
  email                                    String          @unique
  token                                    String          @unique
  expires                                  DateTime

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  @@unique([email, token])

  @@map("password_reset_token")
}

model TwoFactorToken {
  id                                       String          @id @default(cuid())
  email                                    String          @unique
  token                                    String          @unique
  expires                                  DateTime

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  @@unique([email, token])

  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id                                       String          @id @default(cuid())
  userId                                   String
  user                                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])

  @@map("two_factor_confirmation")
}