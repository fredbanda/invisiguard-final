// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                                      String          @id @default(cuid())
  name                                    String?
  email                                   String          @unique
  emailVerified                           DateTime?
  image                                   String?
  accounts                                Account[]
  password                                String?
  phone                                   String?
  address                                 String?
  street                                  String?
  company                                 String?
  city                                    String?
  province                                String?
  role                                    UserRole @default(USER)
  country                                 String?
  scans                                   Scan[]
  PenTestReports                          PenTestReport[]
  postcode                                String?
  isTwoFactorEnabled                      Boolean         @default(false)
  twoFactorConfirmation                   TwoFactorConfirmation? 
  fingerprint                             UserFingerprint[]
  report                                  Report[]
  maxmindTransactions                     MaxMindTransaction[]

  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt

  @@map("user")
}

model MaxMindTransaction {
  id                                     String   @id @default(cuid())
  userId                                 String
  createdAt                              DateTime @default(now())
  updatedAt                              DateTime @updatedAt

  // Device Information
  deviceIpAddress                        String

  // Event Details
  eventShopId                            String
  eventTime                              DateTime
  eventTransactionId                     String
  eventType                              String

  // Account Information
  accountUserId        String
  accountUsername      String

  // Email Details
  emailAddress         String
  emailDomain          String

  // Billing Information
  billingAddress       String
  billingAddress2      String?
  billingCity          String
  billingCompany       String?
  billingCountry       String
  billingFirstName     String
  billingLastName      String
  billingPhoneCountryCode String
  billingPhoneNumber   String
  billingPostal        String
  billingRegion        String

  // Shipping Information
  shippingAddress      String
  shippingAddress2     String?
  shippingCity         String
  shippingCompany      String?
  shippingCountry      String
  shippingDeliverySpeed String
  shippingFirstName    String
  shippingLastName     String
  shippingPhoneCountryCode String
  shippingPhoneNumber  String
  shippingPostal       String
  shippingRegion       String

  // Payment Details
  paymentDeclineCode   String?
  paymentProcessor     String
  paymentWasAuthorized Boolean

  // Credit Card Information
  creditCardAvsResult  String
  creditCardBankName   String?
  creditCardBankPhoneCountryCode String?
  creditCardBankPhoneNumber String?
  creditCardCvvResult  String
  creditCardIssuerIdNumber String
  creditCardLastDigits String
  creditCardToken      String?
  creditCardWas3DSecureSuccessful Boolean

  // Order Details
  orderAffiliateId     String?
  orderAmount          Float
  orderCurrency        String
  orderDiscountCode    String?
  orderHasGiftMessage  Boolean
  orderIsGift          Boolean
  orderReferrerUri     String?
  orderSubaffiliateId  String?

  // Risk Scoring
  riskScore            Float
  ipAddressRisk        Float

  // Shopping Cart Items
  shoppingCartItems    ShoppingCartItem[]

  // Generated PDF
  generatedPdf         Bytes?

  user                 User? @relation(fields: [accountUserId], references: [id])

  @@map("maxmind_transactions")
}

model ShoppingCartItem {
  id                   String   @id @default(cuid())
  transactionId        String
  category             String
  itemId               String
  price                Float
  quantity             Int

  transaction          MaxMindTransaction @relation(fields: [transactionId], references: [id])
}

model Scan {
  id                                        String  @id @default(cuid())
  userId                                    String
  ips                                       String[]
  user                                      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  emails                                    String[]
  phones                                    String[]
  domains                                   String[]
  result                                    String?  // Store a summary of the scan
  pdfUrl                                    String?  // âœ… Store the generated PDF path or URL
  pdfData                                   Bytes?   // OR store the PDF as binary data in PostgreSQL
  createdAt                                 DateTime @default(now())

  @@map("scan")
}

model PenTestReport {
  id                                      String   @id @default(cuid())
  targetUrl                               String
  scanId                                  String
  status                                  String   
  results                                 Json?
  userId                                  String
  user                                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt

  @@map("pen_test_report")
}

model Report {
  id                                      String   @id @default(uuid())
  userId                                  String   @db.Text
  visitorId                               String? 
  ipAddress                               String   @db.Text
  email                                   String   @db.Text
  iin                                     String?  // Credit Card Issuer Identification Number
  eventTime                               DateTime
  timezone                                String   @db.Text
  billingCity                             String?
  billingCountry                          String?  
  billingPostalCode                       String?
  billingPhone                            String?  
  shippingAddress1                        String?  
  shippingAddress2                        String?  
  shippingCountry                         String?  
  shippingPostalCode                      String?
  riskScore                               Float?
  minFraudData                            Json     
  pdfUrl                                  String?  
  createdAt                               DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("report")
}

model UserFingerprint {
  id                                      String   @id @default(cuid())
  userId                                  String
  visitorId                               String
  timestamp                               DateTime @default(now())

  // Device information
  browser                                String?
  os                                     String?
  device                                 String?
  screenResolution                       String?
  language                               String?
  platform                               String?
  timezone                               String?
  touchScreen                            Boolean @default(false)

  // Network Information
  ips                                    String?
  incognito                              Boolean @default(false)

  // Security Analysis
  confidenceScore                        Float @default(0)
  botProbability                         Float @default(0)
  vpnDetected                            Boolean @default(false)
  pdfData                                 PdfData[]

  // Metadata
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt

  user                                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])

  @@map("user_fingerprint")
}

model PdfData {
  id                                      String   @id @default(cuid())
  fingerprintId                           String  @unique
  pdfName                                 String
  pdfBytes                                Bytes
  createdAt                               DateTime @default(now())

  fingerprint                              UserFingerprint @relation(fields: [fingerprintId], references: [id], onDelete: Cascade)
 

  @@map("pdf_data")
}
 
model Account {
  userId                                  String
  type                                    String
  provider                                String
  providerAccountId                       String
  refresh_token                           String?
  access_token                            String?
  expires_at                              Int?
  token_type                              String?
  scope                                   String?
  id_token                                String?
  session_state                           String?
 
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])

  @@map("account")
}

model VerificationToken {
  id                                       String  @id @default(cuid())
  email                                    String  @unique
  token                                    String  @unique
  expires                                  DateTime

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  @@unique([email, token])

  @@map("verification_token")
}

model PasswordResetToken {
  id                                       String          @id @default(cuid())
  email                                    String          @unique
  token                                    String          @unique
  expires                                  DateTime

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  @@unique([email, token])

  @@map("password_reset_token")
}

model TwoFactorToken {
  id                                       String          @id @default(cuid())
  email                                    String          @unique
  token                                    String          @unique
  expires                                  DateTime

  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt

  @@unique([email, token])

  @@map("two_factor_token")
}

model TwoFactorConfirmation {
  id                                       String          @id @default(cuid())
  userId                                   String
  user                                     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])

  @@map("two_factor_confirmation")
}

model ProspectedClient {
  id                                      String  @id @default(cuid())
  contactName                             String
  email                                   String
  phone                                   String
  role                                    String?
  address                                 String?
  companyName                             String?
  industry                                String?
  website                                 String?
  preferredTime                           String[]
  timezone                                String?
  additionalNotes                         String?
  serviceDescription                      String?
  timeline                                String?
  budget                                  String?
  country                                 String?
  companySize                             String?
  annualRevenue                           String?

  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt

  @@map("business")
}